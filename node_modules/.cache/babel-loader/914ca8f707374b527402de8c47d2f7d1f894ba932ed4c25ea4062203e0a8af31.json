{"ast":null,"code":"/**\r\n * spawnWorker\r\n *\r\n * @name spawnWorker\r\n * @function create a new Worker in browser\r\n * @access public\r\n */\nmodule.exports = ({\n  workerPath,\n  workerBlobURL\n}) => {\n  let worker;\n  if (Blob && URL && workerBlobURL) {\n    const blob = new Blob([`importScripts(\"${workerPath}\");`], {\n      type: 'application/javascript'\n    });\n    worker = new Worker(URL.createObjectURL(blob));\n  } else {\n    worker = new Worker(workerPath);\n  }\n  return worker;\n};","map":{"version":3,"names":["module","exports","workerPath","workerBlobURL","worker","Blob","URL","blob","type","Worker","createObjectURL"],"sources":["D:/final/hacakaton/node_modules/tesseract.js/src/worker/browser/spawnWorker.js"],"sourcesContent":["/**\r\n * spawnWorker\r\n *\r\n * @name spawnWorker\r\n * @function create a new Worker in browser\r\n * @access public\r\n */\r\nmodule.exports = ({ workerPath, workerBlobURL }) => {\r\n  let worker;\r\n  if (Blob && URL && workerBlobURL) {\r\n    const blob = new Blob([`importScripts(\"${workerPath}\");`], {\r\n      type: 'application/javascript',\r\n    });\r\n    worker = new Worker(URL.createObjectURL(blob));\r\n  } else {\r\n    worker = new Worker(workerPath);\r\n  }\r\n\r\n  return worker;\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAO,GAAG,CAAC;EAAEC,UAAU;EAAEC;AAAc,CAAC,KAAK;EAClD,IAAIC,MAAM;EACV,IAAIC,IAAI,IAAIC,GAAG,IAAIH,aAAa,EAAE;IAChC,MAAMI,IAAI,GAAG,IAAIF,IAAI,CAAC,CAAC,kBAAkBH,UAAU,KAAK,CAAC,EAAE;MACzDM,IAAI,EAAE;IACR,CAAC,CAAC;IACFJ,MAAM,GAAG,IAAIK,MAAM,CAACH,GAAG,CAACI,eAAe,CAACH,IAAI,CAAC,CAAC;EAChD,CAAC,MAAM;IACLH,MAAM,GAAG,IAAIK,MAAM,CAACP,UAAU,CAAC;EACjC;EAEA,OAAOE,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}